# frozen_string_literal: true

require_relative '../../puppet/application'
# REMIND relative
# REMIND pidlock
require 'puppet/util/pidlock'
require 'puppet/network/http/webrick'
require 'puppet/file_serving/content'
require 'puppet/file_serving/metadata'

class Puppet::Application::Server < Puppet::Application

  run_mode :server

  option("--debug", "-d")
  option("--verbose", "-v")
  option("--logdest DEST", "-l DEST") do |arg|
    handle_logdest_arg(arg)
  end

  def summary
    _("The puppet server")
  end

  def help
    <<~HELP

      puppet-server(8) -- #{summary}
      ========

      SYNOPSIS
      --------
      The central puppet server. Functions as a certificate authority by
      default.


      USAGE
      -----
      puppet server [-d|--debug] [-h|--help]
        [-l|--logdest syslog|<FILE>|console] [-v|--verbose] [-V|--version]


      DESCRIPTION
      -----------
      This command starts an instance of puppet server using Ruby's built-in Webrick webserver.


      OPTIONS
      -------

      Note that any Puppet setting that's valid in the configuration file is also a
      valid long argument. For example, 'server' is a valid setting, so you can
      specify '--server <servername>' as an argument. Boolean settings translate into
      '--setting' and '--no-setting' pairs.

      See the configuration file documentation at
      https://docs.puppetlabs.com/puppet/latest/reference/configuration.html for the
      full list of acceptable settings. A commented list of all settings can also be
      generated by running puppet server with '--genconfig'.

      * --debug:
        Enable full debugging.

      * --help:
        Print this help message.

      * --logdest:
        Where to send log messages. Choose between 'syslog' (the POSIX syslog
        service), 'console', or the path to a log file. If debugging or verbosity is
        enabled, this defaults to 'console'. Otherwise, it defaults to 'syslog'.

        A path ending with '.json' will receive structured output in JSON format. The
        log file will not have an ending ']' automatically written to it due to the
        appending nature of logging. It must be appended manually to make the content
        valid JSON.

      * --serverport:
        The port on which to listen for traffic. The default port is 8140.
        (This is a Puppet setting, and can go in puppet.conf.)

      * --verbose:
        Enable verbosity.

      * --version:
        Print the puppet version number and exit.


      EXAMPLE
      -------
        puppet server


      AUTHOR
      ------
      Luke Kanies


      COPYRIGHT
      ---------
      Copyright (c) 2012 Puppet Inc., LLC Licensed under the Apache 2.0 License

    HELP
  end

  def app_defaults
    super.merge({
                  :facts_terminus => 'yaml'
                })
  end

  def setup_logs
    set_log_level

    unless options[:setdest]
      # We are running a webrick server which has been explicitly foregrounded
      # and '--logdest' has not been passed, assume users want to see logging
      # and log to the console.
      Puppet::Util::Log.newdestination(:console)
    end
  end

  def setup
    raise Puppet::Error, _("Puppet server is not supported on Microsoft Windows") if Puppet.features.microsoft_windows?

    setup_logs

    Puppet::FileServing::Content.indirection.terminus_class = :file_server
    Puppet::FileServing::Metadata.indirection.terminus_class = :file_server

    Puppet::FileBucket::File.indirection.terminus_class = :file

    # Puppet::Node.indirection.terminus_class = Puppet[:node_terminus]
    Puppet::Node.indirection.cache_class = Puppet[:node_cache_terminus]
  end

  def main
    Puppet.settings.use(:main, :server, :ssl, :metrics, :application)

    if Puppet.features.root?
      if Puppet::Type.type(:user).new(:name => Puppet[:user]).exists?
        begin
          Puppet::Util.chuser
        rescue => detail
          Puppet.log_exception(detail, _("Could not change user to %{user}: %{detail}") % { user: Puppet[:user], detail: detail })
          exit(39)
        end
      else
        Puppet.err(_("Could not change user to %{user}. User does not exist and is required to continue.") % { user: Puppet[:user] })
        exit(74)
      end
    end

    Puppet.notice _("Starting Puppet server version %{version}") % { version: Puppet.version }

    server = Puppet::Network::HTTP::WEBrick.new
    server.listen(Puppet[:bindaddress], Puppet[:serverport])
  end
end
